// Copyright 2023 MPCVault (MetaLoop INC)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mpcvault.platform.v1;

import "google/protobuf/wrappers.proto";

option go_package = "go.mpcvault.com/genproto/mpcvaultapis/platform/v1;platform";
option java_multiple_files = true;
option java_outer_classname = "PlatformProto";
option java_package = "com.mpcvault.platform.v1";


service PlatformAPI {
    // CreateSigningRequest creates a signing request for the given transaction.
    rpc CreateSigningRequest (CreateSigningRequestRequest) returns (CreateSigningRequestResponse);

    // RejectSigningRequest rejects a signing request.
    rpc RejectSigningRequest (RejectSigningRequestRequest) returns (RejectSigningRequestResponse);

    // GetSigningRequestDetails returns the details of a signing request.
    rpc GetSigningRequestDetails (GetSigningRequestDetailsRequest) returns (GetSigningRequestDetailsResponse);

    // CreateBatchPayment creates a batch payment.
    rpc CreateBatchPayment (CreateBatchPaymentRequest) returns (CreateBatchPaymentResponse);

    // GetBatchPaymentDetails returns the details of a batch payment.
    rpc GetBatchPaymentDetails (GetBatchPaymentDetailsRequest) returns (GetBatchPaymentDetailsResponse);
}

// EVMGas is the gas fee settings for an EVM transaction.
message EVMGas {
    // max_fee is the maximum fee that the user is willing to pay, denominated in wei.
    google.protobuf.StringValue max_fee = 1;
    // max_priority_fee is the maximum priority fee that the user is willing to pay for EIP-1559 transactions, denominated in wei.
    google.protobuf.StringValue max_priority_fee = 2;
    // gas_limit is the maximum amount of gas that the tx is allowed to consume.
    google.protobuf.StringValue gas_limit = 3;
}

message EVMSendNative {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // to is the address of the recipient.
    string to = 3;
    // value is the amount of the native token to send, denominated in wei.
    string value = 4;
    EVMGas gas_fee = 5;
}

message EVMSendERC20 {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // to is the address of the recipient.
    string to = 3;
    // token_contract_address is the address of the ERC20 token contract.
    string token_contract_address = 4;
    // amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 5;
    EVMGas gas_fee = 6;
}

message EVMSendCustom {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // to is the address of the recipient.
    string to = 3;
    // value is the amount of the native token to send, denominated in wei.
    string value = 4;
    bytes input = 5;
    EVMGas gas_fee = 6;
}

message BTCSendNative {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // amount is the amount of the native token to send, denominated in satoshi.
    string amount = 3;
    // network_fee is the network fee that the user is willing to pay, denominated in sat/b.
    uint64 network_fee = 4;
}

message TronSendNative {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // value is the amount of the native token to send, denominated in sun.
    string value = 3;
}

message TronSendTRC10 {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // asset_name identifies the token to be sent.
    string asset_name = 3;
    // amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 4;
}

message TronSendTRC20 {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // contract_address is the address of the token.
    string contract_address = 3;
    // amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 4;
    // (optional) fee_limit is the maximum fee that the user is willing to pay, denominated in sun.
    google.protobuf.StringValue fee_limit = 5;
}

message AptosGas {
    // (optional) max_gas_amount is the maximum gas units that the transaction can use
    // https://aptos.dev/concepts/gas-txn-fee/#unit-of-gas
    google.protobuf.StringValue max_gas_amount = 1;
    // (optional) gas_unit_price is the price that the user is willing to pay, denominated in octa.
    google.protobuf.StringValue gas_unit_price = 2;
}

message AptosSendNative {
    // please use 1 for mainnet. MPCVault does not support Aptos testnet at the moment
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // to is the address of the recipient.
    string to = 3;
    // value is the amount of the native token to send, denominated in octa.
    string value = 4;
    // (optional) specify the gas fee for the transaction.
    AptosGas gas_fee = 5;
}

message AptosSendCoin {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // to is the address of the recipient.
    string to = 3;
    // coin_tag identifies the coin to be sent.
    string coin_tag = 4;
    // amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 5;
    // (optional) specify the gas fee for the transaction.
    AptosGas gas_fee = 6;
}

message AptosSendCustom {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // payload can be JSON or the bcs-serialized bytes of the transaction.
    bytes payload = 3;
    // (optional) specify the gas fee for the transaction.
    AptosGas gas_fee = 4;
}

message SuiGas {
    // (optional) budget is the maximum fee that the user is willing to pay, denominated in mist.
    google.protobuf.StringValue budget = 1;
    // (optional) price is the price that the user is willing to pay, denominated in mist.
    google.protobuf.StringValue price = 2;
}

message SuiSendNative {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // value is the amount of the native token to send, denominated in mist.
    string value = 3;
    // (optional) specify the gas fee for the transaction.
    SuiGas gas_fee = 4;
}

message SuiSendCoin {
    // from is the address of the sender.
    string from = 1;
    // to is the address of the recipient.
    string to = 2;
    // coin_tag identifies the coin to be sent.
    string coin_tag = 3;
    // amount is the amount of coins to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 4;
    // (optional) specify the gas fee for the transaction.
    SuiGas gas_fee = 5;
}

message SuiSendCustom {
    // from is the address of the sender.
    string from = 1;
    // payload can be JSON or the bcs-serialized bytes of the transaction.
    bytes payload = 2;
}

message SolanaSendNative {
    // from is the account address of the sender.
    string from = 1;
    // to is the account address of the recipient.
    string to = 2;
    // value is the amount of the native token to send, denominated in lamports.
    string value = 3;
}

message SolanaSendSPLToken {
    // from is the account address of the sender.
    string from = 1;
    // to is the account address of the recipient.
    string to = 2;
    // mint_address is the address of the token.
    string mint_address = 3;
    // amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
    string amount = 4;
}

message CreateSigningRequestRequest {
    oneof type {
        EVMSendNative evm_send_native = 1;
        EVMSendERC20 evm_send_erc20 = 2;
        EVMSendCustom evm_send_custom = 3;
        BTCSendNative btc_send_native = 4;
        TronSendNative tron_send_native = 5;
        TronSendTRC10 tron_send_trc10 = 6;
        TronSendTRC20 tron_send_trc20 = 7;
        AptosSendNative aptos_send_native = 8;
        AptosSendCoin aptos_send_coin = 9;
        AptosSendCustom aptos_send_custom = 10;
        SuiSendNative sui_send_native = 11;
        SuiSendCoin sui_send_coin = 12;
        SuiSendCustom sui_send_custom = 13;
        SolanaSendNative solana_send_native = 14;
        SolanaSendSPLToken solana_send_spl_token = 15;
    }
    // notes is the transaction notes for the signing request.
    google.protobuf.StringValue notes = 1000;
}

message CreateSigningRequestResponse {
    SigningRequest signing_request = 1;
}

message RejectSigningRequestRequest {
    string uuid = 1;
}

message RejectSigningRequestResponse {

}

message GetSigningRequestDetailsRequest {
    string uuid = 1;
}

message GetSigningRequestDetailsResponse {
    SigningRequest signing_request = 1;
}

message SigningRequest {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_PENDING = 1;
        STATUS_SUCCEEDED = 2;
        STATUS_FAILED = 3;
    }
    // uuid is the unique identifier of the signing request.
    string uuid = 1;
    // status is the status of the signing request.
    Status status = 2;
    // failed_reason is the reason why the signing request failed, only set if status is STATUS_FAILED.
    string failed_reason = 3;
    // tx_hash is the hash of the transaction, only set if status is STATUS_SUCCEEDED.
    string tx_hash = 4;
    // creation_timestamp is the timestamp when the signing request was created.
    uint64 creation_timestamp = 5;
    oneof type {
        EVMSendNative evm_send_native = 6;
        EVMSendERC20 evm_send_erc20 = 7;
        EVMSendCustom evm_send_custom = 8;
        BTCSendNative btc_send_native = 9;
        TronSendNative tron_send_native = 10;
        TronSendTRC10 tron_send_trc10 = 11;
        TronSendTRC20 tron_send_trc20 = 12;
        AptosSendNative aptos_send_native = 13;
        AptosSendCoin aptos_send_coin = 14;
        AptosSendCustom aptos_send_custom = 15;
        SuiSendNative sui_send_native = 16;
        SuiSendCoin sui_send_coin = 17;
        SuiSendCustom sui_send_custom = 18;
        SolanaSendNative solana_send_native = 19;
        SolanaSendSPLToken solana_send_spl_token = 20;
    }
}

message BatchPaymentRecipient {
    // address is the address of the recipient.
    string address = 1;
    // amount is the amount of the tokens to send.
    // For native tokens such as ether/btc, the amount is denominated in wei/satoshi.
    // For ERC20 tokens you should use whole integer representation. [amount * 10^decimals]
    // For bitcoin, the amount is denominated in satoshi.
    string amount = 2;
    // notes is a note for this entry in the batch payment.
    google.protobuf.StringValue notes = 3;
}

message EVMBatchSendNative {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    repeated BatchPaymentRecipient recipients = 3;
}

message EVMBatchSendERC20 {
    uint64 chain_id = 1;
    // from is the address of the sender.
    string from = 2;
    // token_contract_address is the address of the ERC20 token contract.
    string token_contract_address = 3;
    repeated BatchPaymentRecipient recipients = 4;
}

message BTCBatchSendNative {
    // from is the address of the sender.
    string from = 1;
    repeated BatchPaymentRecipient recipients = 2;
}

message CreateBatchPaymentRequest {
    // name is the name of the batch payment.
    string name = 1;
    // notes is the transaction notes for the batch payment.
    google.protobuf.StringValue notes = 2;
    oneof type {
        EVMBatchSendNative evm_batch_send_native = 3;
        EVMBatchSendERC20 evm_batch_send_erc20 = 4;
        BTCBatchSendNative btc_batch_send_native = 5;
    }
}

message CreateBatchPaymentResponse {
    BatchPayment batch_payment = 1;
}

message GetBatchPaymentDetailsRequest {
    string uuid = 1;
}

message GetBatchPaymentDetailsResponse {
    BatchPayment batch_payment = 1;
}

message BatchPayment {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_PENDING = 1;
        STATUS_SUCCEEDED = 2;
        STATUS_FAILED = 3;
    }
    // uuid is the unique identifier of the batch payment.
    string uuid = 1;
    // name is the name of the batch payment.
    string name = 2;
    // notes is the transaction notes for the batch payment.
    string notes = 3;
    // status is the status of the batch payment.
    Status status = 4;
    // failed_reason is the reason why the batch payment failed, only set if status is STATUS_FAILED.
    string failed_reason = 5;
    // creation_timestamp is the timestamp when the batch payment was created.
    uint64 creation_timestamp = 6;
    // approval_signing_request is the signing request that approves the tokens to be sent if needed.
    SigningRequest approval_signing_request = 7;
    // send_signing_request is the signing request that sends the batch payment.
    SigningRequest send_signing_request = 8;
    oneof type {
        EVMBatchSendNative evm_batch_send_native = 9;
        EVMBatchSendERC20 evm_batch_send_erc20 = 10;
        BTCBatchSendNative btc_batch_send_native = 11;
    }
}
